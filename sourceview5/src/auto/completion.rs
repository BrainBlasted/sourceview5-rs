// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

#[cfg(any(feature = "v5_0", feature = "dox"))]
use glib;
use glib::object::Cast;
use glib::object::IsA;
#[cfg(any(feature = "v5_0", feature = "dox"))]
use glib::object::ObjectExt;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use glib::ToValue;
use glib::Value;
use glib_sys;
use gobject_sys;
use gtk_source_sys;
use std::boxed::Box as Box_;
use std::fmt;
#[cfg(any(feature = "v5_0", feature = "dox"))]
use std::mem;
use std::mem::transmute;
#[cfg(any(feature = "v5_0", feature = "dox"))]
use Buffer;
#[cfg(any(feature = "v5_0", feature = "dox"))]
use CompletionProvider;
#[cfg(any(feature = "v5_0", feature = "dox"))]
use View;

glib_wrapper! {
    pub struct Completion(Object<gtk_source_sys::GtkSourceCompletion, gtk_source_sys::GtkSourceCompletionClass, CompletionClass>);

    match fn {
        get_type => || gtk_source_sys::gtk_source_completion_get_type(),
    }
}

impl Completion {
    //#[cfg(any(feature = "v5_0", feature = "dox"))]
    //pub fn fuzzy_highlight(haystack: &str, casefold_query: &str) -> /*Ignored*/Option<pango::AttrList> {
    //    unsafe { TODO: call gtk_source_sys:gtk_source_completion_fuzzy_highlight() }
    //}

    #[cfg(any(feature = "v5_0", feature = "dox"))]
    pub fn fuzzy_match(haystack: Option<&str>, casefold_needle: &str) -> Option<u32> {
        assert_initialized_main_thread!();
        unsafe {
            let mut priority = mem::MaybeUninit::uninit();
            let ret = from_glib(gtk_source_sys::gtk_source_completion_fuzzy_match(haystack.to_glib_none().0, casefold_needle.to_glib_none().0, priority.as_mut_ptr()));
            let priority = priority.assume_init();
            if ret { Some(priority) } else { None }
        }
    }
}

#[derive(Clone, Default)]
pub struct CompletionBuilder {
    #[cfg(any(feature = "v5_0", feature = "dox"))]
    page_size: Option<u32>,
    remember_info_visibility: Option<bool>,
    select_on_show: Option<bool>,
    show_icons: Option<bool>,
    #[cfg(any(feature = "v5_0", feature = "dox"))]
    view: Option<View>,
}

impl CompletionBuilder {
    pub fn new() -> Self {
        Self::default()
    }


    pub fn build(self) -> Completion {
        let mut properties: Vec<(&str, &dyn ToValue)> = vec![];
        #[cfg(any(feature = "v5_0", feature = "dox"))]
        {
            if let Some(ref page_size) = self.page_size {
                properties.push(("page-size", page_size));
            }
        }
        if let Some(ref remember_info_visibility) = self.remember_info_visibility {
            properties.push(("remember-info-visibility", remember_info_visibility));
        }
        if let Some(ref select_on_show) = self.select_on_show {
            properties.push(("select-on-show", select_on_show));
        }
        if let Some(ref show_icons) = self.show_icons {
            properties.push(("show-icons", show_icons));
        }
        #[cfg(any(feature = "v5_0", feature = "dox"))]
        {
            if let Some(ref view) = self.view {
                properties.push(("view", view));
            }
        }
        let ret = glib::Object::new(Completion::static_type(), &properties)
            .expect("object new")
            .downcast::<Completion>()
            .expect("downcast");
    ret
    }

    #[cfg(any(feature = "v5_0", feature = "dox"))]
    pub fn page_size(mut self, page_size: u32) -> Self {
        self.page_size = Some(page_size);
        self
    }

    pub fn remember_info_visibility(mut self, remember_info_visibility: bool) -> Self {
        self.remember_info_visibility = Some(remember_info_visibility);
        self
    }

    pub fn select_on_show(mut self, select_on_show: bool) -> Self {
        self.select_on_show = Some(select_on_show);
        self
    }

    pub fn show_icons(mut self, show_icons: bool) -> Self {
        self.show_icons = Some(show_icons);
        self
    }

    #[cfg(any(feature = "v5_0", feature = "dox"))]
    pub fn view<P: IsA<View>>(mut self, view: &P) -> Self {
        self.view = Some(view.clone().upcast());
        self
    }
}

pub const NONE_COMPLETION: Option<&Completion> = None;

pub trait CompletionExt: 'static {
    #[cfg(any(feature = "v5_0", feature = "dox"))]
    fn add_provider<P: IsA<CompletionProvider>>(&self, provider: &P);

    fn block_interactive(&self);

    #[cfg(any(feature = "v5_0", feature = "dox"))]
    fn get_buffer(&self) -> Option<Buffer>;

    fn get_page_size(&self) -> u32;

    #[cfg(any(feature = "v5_0", feature = "dox"))]
    fn get_view(&self) -> Option<View>;

    #[cfg(any(feature = "v5_0", feature = "dox"))]
    fn hide(&self);

    #[cfg(any(feature = "v5_0", feature = "dox"))]
    fn remove_provider<P: IsA<CompletionProvider>>(&self, provider: &P);

    fn set_page_size(&self, page_size: u32);

    #[cfg(any(feature = "v5_0", feature = "dox"))]
    fn show(&self);

    fn unblock_interactive(&self);

    fn get_property_remember_info_visibility(&self) -> bool;

    fn set_property_remember_info_visibility(&self, remember_info_visibility: bool);

    fn get_property_select_on_show(&self) -> bool;

    fn set_property_select_on_show(&self, select_on_show: bool);

    fn get_property_show_icons(&self) -> bool;

    fn set_property_show_icons(&self, show_icons: bool);

    #[cfg(any(feature = "v5_0", feature = "dox"))]
    fn connect_hide<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v5_0", feature = "dox"))]
    fn emit_hide(&self);

    #[cfg(any(feature = "v5_0", feature = "dox"))]
    fn connect_provider_added<F: Fn(&Self, &CompletionProvider) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v5_0", feature = "dox"))]
    fn connect_provider_removed<F: Fn(&Self, &CompletionProvider) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v5_0", feature = "dox"))]
    fn connect_show<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v5_0", feature = "dox"))]
    fn emit_show(&self);

    #[cfg(any(feature = "v5_0", feature = "dox"))]
    fn connect_property_buffer_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v5_0", feature = "dox"))]
    fn connect_property_page_size_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_remember_info_visibility_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_select_on_show_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_show_icons_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Completion>> CompletionExt for O {
    #[cfg(any(feature = "v5_0", feature = "dox"))]
    fn add_provider<P: IsA<CompletionProvider>>(&self, provider: &P) {
        unsafe {
            gtk_source_sys::gtk_source_completion_add_provider(self.as_ref().to_glib_none().0, provider.as_ref().to_glib_none().0);
        }
    }

    fn block_interactive(&self) {
        unsafe {
            gtk_source_sys::gtk_source_completion_block_interactive(self.as_ref().to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v5_0", feature = "dox"))]
    fn get_buffer(&self) -> Option<Buffer> {
        unsafe {
            from_glib_none(gtk_source_sys::gtk_source_completion_get_buffer(self.as_ref().to_glib_none().0))
        }
    }

    fn get_page_size(&self) -> u32 {
        unsafe {
            gtk_source_sys::gtk_source_completion_get_page_size(self.as_ref().to_glib_none().0)
        }
    }

    #[cfg(any(feature = "v5_0", feature = "dox"))]
    fn get_view(&self) -> Option<View> {
        unsafe {
            from_glib_none(gtk_source_sys::gtk_source_completion_get_view(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v5_0", feature = "dox"))]
    fn hide(&self) {
        unsafe {
            gtk_source_sys::gtk_source_completion_hide(self.as_ref().to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v5_0", feature = "dox"))]
    fn remove_provider<P: IsA<CompletionProvider>>(&self, provider: &P) {
        unsafe {
            gtk_source_sys::gtk_source_completion_remove_provider(self.as_ref().to_glib_none().0, provider.as_ref().to_glib_none().0);
        }
    }

    fn set_page_size(&self, page_size: u32) {
        unsafe {
            gtk_source_sys::gtk_source_completion_set_page_size(self.as_ref().to_glib_none().0, page_size);
        }
    }

    #[cfg(any(feature = "v5_0", feature = "dox"))]
    fn show(&self) {
        unsafe {
            gtk_source_sys::gtk_source_completion_show(self.as_ref().to_glib_none().0);
        }
    }

    fn unblock_interactive(&self) {
        unsafe {
            gtk_source_sys::gtk_source_completion_unblock_interactive(self.as_ref().to_glib_none().0);
        }
    }

    fn get_property_remember_info_visibility(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"remember-info-visibility\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `remember-info-visibility` getter").unwrap()
        }
    }

    fn set_property_remember_info_visibility(&self, remember_info_visibility: bool) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"remember-info-visibility\0".as_ptr() as *const _, Value::from(&remember_info_visibility).to_glib_none().0);
        }
    }

    fn get_property_select_on_show(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"select-on-show\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `select-on-show` getter").unwrap()
        }
    }

    fn set_property_select_on_show(&self, select_on_show: bool) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"select-on-show\0".as_ptr() as *const _, Value::from(&select_on_show).to_glib_none().0);
        }
    }

    fn get_property_show_icons(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"show-icons\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `show-icons` getter").unwrap()
        }
    }

    fn set_property_show_icons(&self, show_icons: bool) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"show-icons\0".as_ptr() as *const _, Value::from(&show_icons).to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v5_0", feature = "dox"))]
    fn connect_hide<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn hide_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_source_sys::GtkSourceCompletion, f: glib_sys::gpointer)
            where P: IsA<Completion>
        {
            let f: &F = &*(f as *const F);
            f(&Completion::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"hide\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(hide_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v5_0", feature = "dox"))]
    fn emit_hide(&self) {
        let _ = unsafe { glib::Object::from_glib_borrow(self.as_ptr() as *mut gobject_sys::GObject).emit("hide", &[]).unwrap() };
    }

    #[cfg(any(feature = "v5_0", feature = "dox"))]
    fn connect_provider_added<F: Fn(&Self, &CompletionProvider) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn provider_added_trampoline<P, F: Fn(&P, &CompletionProvider) + 'static>(this: *mut gtk_source_sys::GtkSourceCompletion, provider: *mut gtk_source_sys::GtkSourceCompletionProvider, f: glib_sys::gpointer)
            where P: IsA<Completion>
        {
            let f: &F = &*(f as *const F);
            f(&Completion::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(provider))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"provider-added\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(provider_added_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v5_0", feature = "dox"))]
    fn connect_provider_removed<F: Fn(&Self, &CompletionProvider) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn provider_removed_trampoline<P, F: Fn(&P, &CompletionProvider) + 'static>(this: *mut gtk_source_sys::GtkSourceCompletion, provider: *mut gtk_source_sys::GtkSourceCompletionProvider, f: glib_sys::gpointer)
            where P: IsA<Completion>
        {
            let f: &F = &*(f as *const F);
            f(&Completion::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(provider))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"provider-removed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(provider_removed_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v5_0", feature = "dox"))]
    fn connect_show<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn show_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_source_sys::GtkSourceCompletion, f: glib_sys::gpointer)
            where P: IsA<Completion>
        {
            let f: &F = &*(f as *const F);
            f(&Completion::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"show\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(show_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v5_0", feature = "dox"))]
    fn emit_show(&self) {
        let _ = unsafe { glib::Object::from_glib_borrow(self.as_ptr() as *mut gobject_sys::GObject).emit("show", &[]).unwrap() };
    }

    #[cfg(any(feature = "v5_0", feature = "dox"))]
    fn connect_property_buffer_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_buffer_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_source_sys::GtkSourceCompletion, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Completion>
        {
            let f: &F = &*(f as *const F);
            f(&Completion::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::buffer\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_buffer_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v5_0", feature = "dox"))]
    fn connect_property_page_size_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_page_size_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_source_sys::GtkSourceCompletion, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Completion>
        {
            let f: &F = &*(f as *const F);
            f(&Completion::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::page-size\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_page_size_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_remember_info_visibility_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_remember_info_visibility_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_source_sys::GtkSourceCompletion, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Completion>
        {
            let f: &F = &*(f as *const F);
            f(&Completion::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::remember-info-visibility\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_remember_info_visibility_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_select_on_show_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_select_on_show_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_source_sys::GtkSourceCompletion, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Completion>
        {
            let f: &F = &*(f as *const F);
            f(&Completion::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::select-on-show\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_select_on_show_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_show_icons_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_show_icons_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_source_sys::GtkSourceCompletion, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Completion>
        {
            let f: &F = &*(f as *const F);
            f(&Completion::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::show-icons\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_show_icons_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for Completion {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Completion")
    }
}
